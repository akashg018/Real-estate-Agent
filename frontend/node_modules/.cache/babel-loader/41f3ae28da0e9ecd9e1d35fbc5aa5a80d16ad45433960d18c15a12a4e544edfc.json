{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\Real-estate-Agent\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport { Container, CssBaseline } from '@mui/material';\nimport ChatInterface from './components/ChatInterface';\nimport Header from './components/Header';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: '#2196f3'\n    },\n    secondary: {\n      main: '#f50057'\n    },\n    background: {\n      default: '#f5f5f5'\n    }\n  },\n  typography: {\n    fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif'\n  }\n});\nfunction App() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [currentResponse, setCurrentResponse] = useState(null);\n  const handleSendMessage = async message => {\n    setLoading(true);\n    setMessages(prev => [...prev, {\n      type: 'user',\n      content: message\n    }]);\n    try {\n      const response = await fetch('/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message\n        })\n      });\n      const data = await response.json();\n      setCurrentResponse(data);\n      if (Array.isArray(data.conversation)) {\n        let previousAgent = null;\n        for (const msg of data.conversation) {\n          // Add typing indicator\n          setMessages(prev => [...prev, {\n            type: 'typing',\n            agent: msg.name,\n            content: '...',\n            emoji: msg.emoji,\n            role: msg.role\n          }]);\n\n          // Simulate typing time\n          const typingTime = Math.min(2000, 500 + Math.random() * 1000);\n          await new Promise(resolve => setTimeout(resolve, typingTime));\n\n          // Remove typing indicator\n          setMessages(prev => prev.filter(m => m.type !== 'typing'));\n\n          // If it's a new agent speaking, add a handoff effect\n          if (previousAgent && previousAgent !== msg.name) {\n            setMessages(prev => [...prev.slice(0, -1), {\n              ...prev[prev.length - 1],\n              messageType: 'handoff',\n              handoff: msg.name\n            }]);\n            await new Promise(resolve => setTimeout(resolve, 1000));\n          }\n\n          // Process agent's messages\n          const formattedMessages = formatMessageContent(msg);\n          for (const formattedMsg of formattedMessages) {\n            setMessages(prev => [...prev, {\n              type: 'agent',\n              agent: msg.name,\n              content: formattedMsg.content,\n              emoji: msg.emoji,\n              role: msg.role,\n              messageType: msg.type,\n              contentType: formattedMsg.type\n            }]);\n\n            // Add slight delay between multiple messages from same agent\n            await new Promise(resolve => setTimeout(resolve, 800));\n          }\n          previousAgent = msg.name;\n        }\n      } else {\n        setMessages(prev => [...prev, {\n          type: 'agent',\n          agent: 'Sarah',\n          content: 'Sorry, I encountered an error. Please try again.',\n          emoji: '👱‍♀️',\n          role: 'Team Lead',\n          messageType: 'error'\n        }]);\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      setMessages(prev => [...prev, {\n        type: 'agent',\n        agent: 'Sarah',\n        content: 'Sorry, I encountered an error. Please try again.',\n        emoji: '👱‍♀️',\n        messageType: 'error'\n      }]);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeProvider, {\n    theme: theme,\n    children: [/*#__PURE__*/_jsxDEV(CssBaseline, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"lg\",\n      sx: {\n        height: '100vh',\n        display: 'flex',\n        flexDirection: 'column',\n        py: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatInterface, {\n        messages: messages,\n        onSendMessage: handleSendMessage,\n        loading: loading,\n        sx: {\n          flexGrow: 1\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"xrx47swNXivdXqQEmYhY6ntdJMs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","ThemeProvider","createTheme","Container","CssBaseline","ChatInterface","Header","jsxDEV","_jsxDEV","theme","palette","primary","main","secondary","background","default","typography","fontFamily","App","_s","messages","setMessages","loading","setLoading","currentResponse","setCurrentResponse","handleSendMessage","message","prev","type","content","response","fetch","method","headers","body","JSON","stringify","data","json","Array","isArray","conversation","previousAgent","msg","agent","name","emoji","role","typingTime","Math","min","random","Promise","resolve","setTimeout","filter","m","slice","length","messageType","handoff","formattedMessages","formatMessageContent","formattedMsg","contentType","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","maxWidth","sx","height","display","flexDirection","py","onSendMessage","flexGrow","_c","$RefreshReg$"],"sources":["D:/Projects/Real-estate-Agent/frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\r\nimport { Container, CssBaseline } from '@mui/material';\r\nimport ChatInterface from './components/ChatInterface';\r\nimport Header from './components/Header';\r\n\r\nconst theme = createTheme({\r\n  palette: {\r\n    primary: { main: '#2196f3' },\r\n    secondary: { main: '#f50057' },\r\n    background: { default: '#f5f5f5' },\r\n  },\r\n  typography: {\r\n    fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\r\n  },\r\n});\r\n\r\nfunction App() {\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [currentResponse, setCurrentResponse] = useState(null);\r\n\r\n  const handleSendMessage = async (message) => {\r\n    setLoading(true);\r\n    setMessages(prev => [...prev, { type: 'user', content: message }]);\r\n\r\n    try {\r\n      const response = await fetch('/chat', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ message }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      setCurrentResponse(data);\r\n\r\n      if (Array.isArray(data.conversation)) {\r\n        let previousAgent = null;\r\n        \r\n        for (const msg of data.conversation) {\r\n          // Add typing indicator\r\n          setMessages(prev => [...prev, {\r\n            type: 'typing',\r\n            agent: msg.name,\r\n            content: '...',\r\n            emoji: msg.emoji,\r\n            role: msg.role\r\n          }]);\r\n\r\n          // Simulate typing time\r\n          const typingTime = Math.min(2000, 500 + Math.random() * 1000);\r\n          await new Promise(resolve => setTimeout(resolve, typingTime));\r\n\r\n          // Remove typing indicator\r\n          setMessages(prev => prev.filter(m => m.type !== 'typing'));\r\n\r\n          // If it's a new agent speaking, add a handoff effect\r\n          if (previousAgent && previousAgent !== msg.name) {\r\n            setMessages(prev => [...prev.slice(0, -1), {\r\n              ...prev[prev.length - 1],\r\n              messageType: 'handoff',\r\n              handoff: msg.name\r\n            }]);\r\n            await new Promise(resolve => setTimeout(resolve, 1000));\r\n          }\r\n\r\n          // Process agent's messages\r\n          const formattedMessages = formatMessageContent(msg);\r\n          \r\n          for (const formattedMsg of formattedMessages) {\r\n            setMessages(prev => [...prev, {\r\n              type: 'agent',\r\n              agent: msg.name,\r\n              content: formattedMsg.content,\r\n              emoji: msg.emoji,\r\n              role: msg.role,\r\n              messageType: msg.type,\r\n              contentType: formattedMsg.type\r\n            }]);\r\n\r\n            // Add slight delay between multiple messages from same agent\r\n            await new Promise(resolve => setTimeout(resolve, 800));\r\n          }\r\n\r\n          previousAgent = msg.name;\r\n        }\r\n      } else {\r\n        setMessages(prev => [...prev, {\r\n          type: 'agent',\r\n          agent: 'Sarah',\r\n          content: 'Sorry, I encountered an error. Please try again.',\r\n          emoji: '👱‍♀️',\r\n          role: 'Team Lead',\r\n          messageType: 'error'\r\n        }]);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n      setMessages(prev => [...prev, {\r\n        type: 'agent',\r\n        agent: 'Sarah',\r\n        content: 'Sorry, I encountered an error. Please try again.',\r\n        emoji: '👱‍♀️',\r\n        messageType: 'error'\r\n      }]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <Container maxWidth=\"lg\" sx={{ height: '100vh', display: 'flex', flexDirection: 'column', py: 2 }}>\r\n        <Header />\r\n        <ChatInterface\r\n          messages={messages}\r\n          onSendMessage={handleSendMessage}\r\n          loading={loading}\r\n          sx={{ flexGrow: 1 }}\r\n        />\r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}